// <auto-generated />
using System;
using DertInfo.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DertInfo.Repository.Migrations
{
    [DbContext(typeof(DertInfoContext))]
    [Migration("20201211010915_DertOfDerts-Update6")]
    partial class DertOfDertsUpdate6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("DertInfo.Models.Database.AccessKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("AccessKeyRef")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("'00000000-0000-0000-0000-000000000000'");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccessKeys");
                });

            modelBuilder.Entity("DertInfo.Models.Database.AccessKeyUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessKeyId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("DeletePermitted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("EditPermitted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ViewPermitted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("AccessKeyId")
                        .HasDatabaseName("IX_AccessKeyId");

                    b.ToTable("AccessKeyUsers");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AudienceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("PriceTBC")
                        .HasColumnType("bit");

                    b.Property<bool>("SoldOut")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("EventId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ActivityMemberAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MemberAttendanceId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("MemberAttendanceId");

                    b.ToTable("ActivityMemberAttendances");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ActivityTeamAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamAttendanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("TeamAttendanceId");

                    b.ToTable("ActivityTeamAttendances");
                });

            modelBuilder.Entity("DertInfo.Models.Database.AttendanceClassification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassificationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ClassificationPrice")
                        .HasColumnType("decimal");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventId");

                    b.ToTable("AttendanceClassifications");
                });

            modelBuilder.Entity("DertInfo.Models.Database.BreadcrumbItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsTypeRoot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("label");

                    b.Property<int>("LineageIndex")
                        .HasColumnType("int")
                        .HasColumnName("lineageIndex");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<string>("PageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BreadcrumbItems");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AllowAdHocDanceAddition")
                        .HasColumnType("bit");

                    b.Property<string>("CompetitionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'2015-01-20T00:00:00.000'");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'2015-01-20T00:00:00.000'");

                    b.Property<DateTime?>("DatePopulated")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("1");

                    b.Property<int>("FlowState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("1");

                    b.Property<bool>("HasBeenPopulated")
                        .HasColumnType("bit");

                    b.Property<bool>("InTestingMode")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("JudgeRequirementPerVenue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("1");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ResultsAreCollated")
                        .HasColumnType("bit");

                    b.Property<bool>("ResultsPublished")
                        .HasColumnType("bit");

                    b.Property<decimal>("TeamEntryFee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("DertInfo.Models.Database.CompetitionEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'2015-02-18T00:00:00.000'");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'2015-02-18T00:00:00.000'");

                    b.Property<int>("DertYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamAttendanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId")
                        .HasDatabaseName("IX_CompetitionId");

                    b.HasIndex("TeamAttendanceId")
                        .HasDatabaseName("IX_TeamAttendanceId");

                    b.ToTable("CompetitionEntries");
                });

            modelBuilder.Entity("DertInfo.Models.Database.CompetitionEntryAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitionAppliesToId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionAppliesToId")
                        .HasDatabaseName("IX_CompetitionAppliesToId");

                    b.ToTable("CompetitionEntryAttributes");
                });

            modelBuilder.Entity("DertInfo.Models.Database.CompetitionJudge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JudgeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId")
                        .HasDatabaseName("IX_CompetitionId");

                    b.HasIndex("JudgeId")
                        .HasDatabaseName("IX_JudgeId");

                    b.ToTable("CompetitionJudges");
                });

            modelBuilder.Entity("DertInfo.Models.Database.CompetitionVenuesJoin", b =>
                {
                    b.Property<int>("CompetitionId")
                        .HasColumnType("int")
                        .HasColumnName("Competition_Id");

                    b.Property<int>("VenueId")
                        .HasColumnType("int")
                        .HasColumnName("Venue_Id");

                    b.HasKey("CompetitionId", "VenueId")
                        .HasName("PK_dbo.CompetitionVenuesJoin");

                    b.HasIndex("CompetitionId")
                        .HasDatabaseName("IX_Competition_Id");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("IX_Venue_Id");

                    b.ToTable("CompetitionVenuesJoin");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Dance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateScoresEntered")
                        .HasColumnType("datetime");

                    b.Property<int>("DertYear")
                        .HasColumnType("int");

                    b.Property<bool>("HasScoresChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("HasScoresEntered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Overrun")
                        .HasColumnType("bit");

                    b.Property<string>("ScoresEnteredBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamAttendanceId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId")
                        .HasDatabaseName("IX_CompetitionId");

                    b.HasIndex("TeamAttendanceId")
                        .HasDatabaseName("IX_TeamAttendanceId");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("IX_VenueId");

                    b.ToTable("Dances");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DanceScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CommentGiven")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("MarkGiven")
                        .HasColumnType("decimal");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ScoreCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DanceId")
                        .HasDatabaseName("IX_DanceId");

                    b.HasIndex("ScoreCategoryId")
                        .HasDatabaseName("IX_ScoreCategoryId");

                    b.ToTable("DanceScores");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DanceScorePart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DanceScoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JudgeSlotId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ScoreGiven")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DanceScoreId");

                    b.HasIndex("JudgeSlotId");

                    b.ToTable("DanceScoreParts");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DertCompetitionEntryAttributeDertCompetitionEntry", b =>
                {
                    b.Property<int>("DertCompetitionEntryId")
                        .HasColumnType("int")
                        .HasColumnName("DertCompetitionEntry_Id");

                    b.Property<int>("DertCompetitionEntryAttributeId")
                        .HasColumnType("int")
                        .HasColumnName("DertCompetitionEntryAttribute_Id");

                    b.HasKey("DertCompetitionEntryId", "DertCompetitionEntryAttributeId")
                        .HasName("PK_dbo.DertCompetitionEntryAttributeDertCompetitionEntries");

                    b.HasIndex("DertCompetitionEntryAttributeId")
                        .HasDatabaseName("IX_DertCompetitionEntryAttribute_Id");

                    b.HasIndex("DertCompetitionEntryId")
                        .HasDatabaseName("IX_DertCompetitionEntry_Id");

                    b.ToTable("DertCompetitionEntryAttributeDertCompetitionEntries");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DodResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BuzzComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BuzzScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CharactersComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CharactersScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DanceTechniqueComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DanceTechniqueScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DodUserId")
                        .HasColumnType("int");

                    b.Property<bool>("HasOutstandingComplaint")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeInScores")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MusicComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MusicScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OverallComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentationComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PresentationScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SteppingComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SteppingScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SubmissionId")
                        .HasColumnType("int");

                    b.Property<string>("SwordHandlingComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SwordHandlingScore")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DodUserId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("DodResult");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DodResultComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("DodResultId")
                        .HasColumnType("int");

                    b.Property<bool>("ForComments")
                        .HasColumnType("bit");

                    b.Property<bool>("ForScores")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DodResultId");

                    b.ToTable("DodResultComplaint");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DodSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CumulativeBuzzScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CumulativeCharactersScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CumulativeDanceTechniqueScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CumulativeMusicScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CumulativeNumberOfResults")
                        .HasColumnType("int");

                    b.Property<decimal>("CumulativePresentationScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CumulativeSteppingScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CumulativeSwordHandlingScore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DertVenueFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DertYearFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsChampionship")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPremier")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YouTubeLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("DodSubmission");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DodUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTermsAndConditionsAgreed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOfficial")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TermsAndConditionsAgreed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("DodUser");
                });

            modelBuilder.Entity("DertInfo.Models.Database.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventId");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EventEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EventStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EventSynopsis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventTemplateType")
                        .HasColumnType("int");

                    b.Property<int>("EventVisibilityType")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfigured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPromoted")
                        .HasColumnType("bit");

                    b.Property<string>("LocationPostcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationTown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RegistrationCloseDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RegistrationOpenDate")
                        .HasColumnType("datetime");

                    b.Property<string>("SentEmailsBcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TermsAndConditionsAgreed")
                        .HasColumnType("bit");

                    b.Property<string>("TermsAndConditionsAgreedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DertInfo.Models.Database.EventImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventId");

                    b.HasIndex("ImageId")
                        .HasDatabaseName("IX_ImageId");

                    b.ToTable("EventImages");
                });

            modelBuilder.Entity("DertInfo.Models.Database.EventJudge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("JudgeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventId");

                    b.HasIndex("JudgeId")
                        .HasDatabaseName("IX_JudgeId");

                    b.ToTable("EventJudges");
                });

            modelBuilder.Entity("DertInfo.Models.Database.EventSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventId");

                    b.ToTable("EventSettings");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupMemberJoiningPinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupVisibilityType")
                        .HasColumnType("int");

                    b.Property<bool>("IsConfigured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginPostcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginTown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TermsAndConditionsAgreed")
                        .HasColumnType("bit");

                    b.Property<string>("TermsAndConditionsAgreedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DertInfo.Models.Database.GroupImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("IX_GroupId");

                    b.HasIndex("ImageId")
                        .HasDatabaseName("IX_ImageId");

                    b.ToTable("GroupImages");
                });

            modelBuilder.Entity("DertInfo.Models.Database.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MemberType")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("IX_GroupId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("MarkedForRemoval")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("HasPaid")
                        .HasColumnType("bit");

                    b.Property<string>("InvoiceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceEntryNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceLineItemNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceToEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceToName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceToTeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InvoiceTotal")
                        .HasColumnType("decimal");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId")
                        .HasDatabaseName("IX_RegistrationId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Judge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Judges");
                });

            modelBuilder.Entity("DertInfo.Models.Database.JudgeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("JudgeId")
                        .HasColumnType("int");

                    b.Property<int>("MarkingSet")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScoreSetId")
                        .HasColumnType("int");

                    b.Property<int>("VenueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId")
                        .HasDatabaseName("IX_CompetitionId");

                    b.HasIndex("JudgeId")
                        .HasDatabaseName("IX_JudgeId");

                    b.HasIndex("ScoreSetId")
                        .HasDatabaseName("IX_ScoreSetId");

                    b.HasIndex("VenueId")
                        .HasDatabaseName("IX_VenueId");

                    b.ToTable("JudgeSlots");
                });

            modelBuilder.Entity("DertInfo.Models.Database.MarkingSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScoreSheetImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DanceId")
                        .HasDatabaseName("IX_DanceId");

                    b.ToTable("MarkingSheets");
                });

            modelBuilder.Entity("DertInfo.Models.Database.MarkingSheetImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'1900-01-01T00:00:00.000'");

                    b.Property<DateTime>("DateModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'1900-01-01T00:00:00.000'");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DanceId")
                        .HasDatabaseName("IX_DanceId");

                    b.HasIndex("ImageId")
                        .HasDatabaseName("IX_ImageId");

                    b.ToTable("MarkingSheetImages");
                });

            modelBuilder.Entity("DertInfo.Models.Database.MemberAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AttendanceClassificationId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupMemberId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceClassificationId")
                        .HasDatabaseName("IX_AttendanceClassificationId");

                    b.HasIndex("GroupMemberId")
                        .HasDatabaseName("IX_GroupMemberId");

                    b.HasIndex("RegistrationId")
                        .HasDatabaseName("IX_RegistrationId");

                    b.ToTable("MemberAttendances");
                });

            modelBuilder.Entity("DertInfo.Models.Database.NavigationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MinimumRequiredRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NavigationItemSpecialRef")
                        .HasColumnType("int");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NavigationItems");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserAppliesTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("DertYear")
                        .HasColumnType("int");

                    b.Property<int>("EstimateAccomodation")
                        .HasColumnType("int");

                    b.Property<int>("EstimateAttending")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("FlowState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TermsAndConditionsAgreed")
                        .HasColumnType("bit");

                    b.Property<string>("TermsAndConditionsAgreedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventId");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("IX_GroupId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ScoreCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitionAppliesToId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InScoreSet1")
                        .HasColumnType("bit");

                    b.Property<bool>("InScoreSet2")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxMarks")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionAppliesToId")
                        .HasDatabaseName("IX_CompetitionAppliesToId");

                    b.ToTable("ScoreCategories");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ScoreSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompetitionId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId")
                        .HasDatabaseName("IX_CompetitionId");

                    b.ToTable("ScoreSets");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ScoreSetScoreCategory", b =>
                {
                    b.Property<int>("ScoreSetId")
                        .HasColumnType("int")
                        .HasColumnName("ScoreSet_Id");

                    b.Property<int>("ScoreCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ScoreCategory_Id");

                    b.HasKey("ScoreSetId", "ScoreCategoryId")
                        .HasName("PK_dbo.ScoreSetScoreCategories");

                    b.HasIndex("ScoreCategoryId")
                        .HasDatabaseName("IX_ScoreCategory_Id");

                    b.HasIndex("ScoreSetId")
                        .HasDatabaseName("IX_ScoreSet_Id");

                    b.ToTable("ScoreSetScoreCategories");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Spectator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("DertYear")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfAdultConcessionTickets")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfAdultTickets")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfCampingTickets")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfJuniorTickets")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfYouthTickets")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Spectators");
                });

            modelBuilder.Entity("DertInfo.Models.Database.StaticResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("HtmlContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResultType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StaticResults");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Steward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ContactNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("DertYear")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stewards");
                });

            modelBuilder.Entity("DertInfo.Models.Database.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemSettings");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowShowcase")
                        .HasColumnType("bit");

                    b.Property<string>("TeamBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("IX_GroupId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("DertInfo.Models.Database.TeamAggregateScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("AggregateScore")
                        .HasColumnType("decimal");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("DertTeamId")
                        .HasColumnType("int");

                    b.Property<int>("DertYear")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Organiser")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DertTeamId")
                        .HasDatabaseName("IX_DertTeamId");

                    b.ToTable("TeamAggregateScores");
                });

            modelBuilder.Entity("DertInfo.Models.Database.TeamAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttendanceNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId")
                        .HasDatabaseName("IX_RegistrationId");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("IX_TeamId");

                    b.ToTable("TeamAttendances");
                });

            modelBuilder.Entity("DertInfo.Models.Database.TeamImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .HasDatabaseName("IX_ImageId");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("IX_TeamId");

                    b.ToTable("TeamImages");
                });

            modelBuilder.Entity("DertInfo.Models.Database.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("UserName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("'Should be your username.'");

                    b.Property<string>("YourName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("'Should be your name.'");

                    b.HasKey("UserId")
                        .HasName("PK_dbo.UserProfile");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Venue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Auth0Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime");

                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("1");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JudgeMinderUsername")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("DertInfo.Models.Database.WebpagesMembership", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ConfirmationToken")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("LastPasswordFailureDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("PasswordChangedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PasswordFailuresSinceLastSuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("0");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("PasswordVerificationToken")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("PasswordVerificationTokenExpirationDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId")
                        .HasName("PK__webpages__1788CC4CE7FC2C39");

                    b.ToTable("webpages_Membership");
                });

            modelBuilder.Entity("DertInfo.Models.Database.WebpagesOauthMembership", b =>
                {
                    b.Property<string>("Provider")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ProviderUserId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Provider", "ProviderUserId")
                        .HasName("PK__webpages__F53FC0ED8537BC39");

                    b.ToTable("webpages_OAuthMembership");
                });

            modelBuilder.Entity("DertInfo.Models.Database.WebpagesRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("RoleId")
                        .HasName("PK__webpages__8AFACE1A5DFE3B86");

                    b.HasIndex("RoleName")
                        .IsUnique()
                        .HasDatabaseName("UQ__webpages__8A2B6160B736E32A");

                    b.ToTable("webpages_Roles");
                });

            modelBuilder.Entity("DertInfo.Models.Database.WebpagesUsersInRoles", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PK__webpages__AF2760ADE5219DA6");

                    b.HasIndex("RoleId");

                    b.ToTable("webpages_UsersInRoles");
                });

            modelBuilder.Entity("DertInfo.Models.Database.AccessKeyUser", b =>
                {
                    b.HasOne("DertInfo.Models.Database.AccessKey", "AccessKey")
                        .WithMany("AccessKeyUsers")
                        .HasForeignKey("AccessKeyId")
                        .HasConstraintName("FK_dbo.AccessKeyUsers_dbo.AccessKeys_AccessKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessKey");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Activity", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Competition", "Competition")
                        .WithMany()
                        .HasForeignKey("CompetitionId");

                    b.HasOne("DertInfo.Models.Database.Event", "Event")
                        .WithMany("Activities")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ActivityMemberAttendance", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Activity", "Activity")
                        .WithMany("ParticipatingIndividuals")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.MemberAttendance", "MemberAttendance")
                        .WithMany("MemberActivities")
                        .HasForeignKey("MemberAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("MemberAttendance");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ActivityTeamAttendance", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Activity", "Activity")
                        .WithMany("ParticipatingTeams")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.TeamAttendance", "TeamAttendance")
                        .WithMany("TeamActivities")
                        .HasForeignKey("TeamAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("TeamAttendance");
                });

            modelBuilder.Entity("DertInfo.Models.Database.AttendanceClassification", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Event", "Event")
                        .WithMany("AttendanceClassifications")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_dbo.AttendanceClassifications_dbo.Events_EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Competition", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Event", "Event")
                        .WithMany("Competitions")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_dbo.Competitions_dbo.Events_EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DertInfo.Models.Database.CompetitionEntry", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Competition", "Competition")
                        .WithMany("CompetitionEntries")
                        .HasForeignKey("CompetitionId")
                        .HasConstraintName("FK_dbo.CompetitionEntries_dbo.Competitions_CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.TeamAttendance", "TeamAttendance")
                        .WithMany("CompetitionEntries")
                        .HasForeignKey("TeamAttendanceId")
                        .HasConstraintName("FK_dbo.CompetitionEntries_dbo.TeamAttendances_TeamAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("TeamAttendance");
                });

            modelBuilder.Entity("DertInfo.Models.Database.CompetitionEntryAttribute", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Competition", "CompetitionAppliesTo")
                        .WithMany("CompetitionEntryAttributes")
                        .HasForeignKey("CompetitionAppliesToId")
                        .HasConstraintName("FK_dbo.CompetitionEntryAttributes_dbo.Competitions_CompetitionAppliesToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompetitionAppliesTo");
                });

            modelBuilder.Entity("DertInfo.Models.Database.CompetitionJudge", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Competition", "Competition")
                        .WithMany("CompetitionJudges")
                        .HasForeignKey("CompetitionId")
                        .HasConstraintName("FK_dbo.CompetitionJudges_dbo.Competitions_CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Judge", "Judge")
                        .WithMany("CompetitionJudges")
                        .HasForeignKey("JudgeId")
                        .HasConstraintName("FK_dbo.CompetitionJudges_dbo.Judges_JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Judge");
                });

            modelBuilder.Entity("DertInfo.Models.Database.CompetitionVenuesJoin", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Competition", "Competition")
                        .WithMany("CompetitionVenuesJoin")
                        .HasForeignKey("CompetitionId")
                        .HasConstraintName("FK_dbo.CompetitionVenuesJoin_dbo.Competitions_Competition_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Venue", "Venue")
                        .WithMany("CompetitionVenuesJoin")
                        .HasForeignKey("VenueId")
                        .HasConstraintName("FK_dbo.CompetitionVenuesJoin_dbo.Venues_Venue_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Dance", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Competition", "Competition")
                        .WithMany("Dances")
                        .HasForeignKey("CompetitionId")
                        .HasConstraintName("FK_dbo.Dances_dbo.Competitions_CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.TeamAttendance", "TeamAttendance")
                        .WithMany("Dances")
                        .HasForeignKey("TeamAttendanceId")
                        .HasConstraintName("FK_dbo.Dances_dbo.TeamAttendances_TeamAttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Venue", "Venue")
                        .WithMany("Dances")
                        .HasForeignKey("VenueId")
                        .HasConstraintName("FK_dbo.Dances_dbo.Venues_VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("TeamAttendance");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DanceScore", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Dance", "Dance")
                        .WithMany("DanceScores")
                        .HasForeignKey("DanceId")
                        .HasConstraintName("FK_dbo.DanceScores_dbo.Dances_DanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.ScoreCategory", "ScoreCategory")
                        .WithMany("DanceScores")
                        .HasForeignKey("ScoreCategoryId")
                        .HasConstraintName("FK_dbo.DanceScores_dbo.ScoreCategories_ScoreCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dance");

                    b.Navigation("ScoreCategory");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DanceScorePart", b =>
                {
                    b.HasOne("DertInfo.Models.Database.DanceScore", "DanceScore")
                        .WithMany("DanceScoreParts")
                        .HasForeignKey("DanceScoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.JudgeSlot", "JudgeSlot")
                        .WithMany("DanceScoreParts")
                        .HasForeignKey("JudgeSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DanceScore");

                    b.Navigation("JudgeSlot");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DertCompetitionEntryAttributeDertCompetitionEntry", b =>
                {
                    b.HasOne("DertInfo.Models.Database.CompetitionEntryAttribute", "DertCompetitionEntryAttribute")
                        .WithMany("DertCompetitionEntryAttributeDertCompetitionEntries")
                        .HasForeignKey("DertCompetitionEntryAttributeId")
                        .HasConstraintName("FK_dbo.DertCompetitionEntryAttributeDertCompetitionEntries_dbo.CompetitionEntryAttributes_DertCompetitionEntryAttribute_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.CompetitionEntry", "DertCompetitionEntry")
                        .WithMany("DertCompetitionEntryAttributeDertCompetitionEntries")
                        .HasForeignKey("DertCompetitionEntryId")
                        .HasConstraintName("FK_dbo.DertCompetitionEntryAttributeDertCompetitionEntries_dbo.CompetitionEntries_DertCompetitionEntry_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DertCompetitionEntry");

                    b.Navigation("DertCompetitionEntryAttribute");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DodResult", b =>
                {
                    b.HasOne("DertInfo.Models.Database.DodUser", "DodUser")
                        .WithMany("DodResults")
                        .HasForeignKey("DodUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.DodSubmission", "Submission")
                        .WithMany("DodResults")
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DodUser");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DodResultComplaint", b =>
                {
                    b.HasOne("DertInfo.Models.Database.DodResult", "DodResult")
                        .WithMany("DodResultComplaints")
                        .HasForeignKey("DodResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DodResult");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DodSubmission", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DertInfo.Models.Database.EmailTemplate", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Event", "Event")
                        .WithMany("EmailTemplates")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_dbo.EmailTemplates_dbo.Events_EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DertInfo.Models.Database.EventImage", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Event", "Event")
                        .WithMany("EventImages")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_dbo.EventImages_dbo.Events_EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Image", "Image")
                        .WithMany("EventImages")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_dbo.EventImages_dbo.Images_ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("DertInfo.Models.Database.EventJudge", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Event", "Event")
                        .WithMany("EventJudges")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_dbo.EventJudges_dbo.Events_EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Judge", "Judge")
                        .WithMany("EventJudges")
                        .HasForeignKey("JudgeId")
                        .HasConstraintName("FK_dbo.EventJudges_dbo.Judges_JudgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Judge");
                });

            modelBuilder.Entity("DertInfo.Models.Database.EventSetting", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Event", "Event")
                        .WithMany("EventSettings")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_dbo.EventSettings_dbo.Events_EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DertInfo.Models.Database.GroupImage", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Group", "Group")
                        .WithMany("GroupImages")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_dbo.GroupImages_dbo.Groups_GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Image", "Image")
                        .WithMany("GroupImages")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_dbo.GroupImages_dbo.Images_ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("DertInfo.Models.Database.GroupMember", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_dbo.GroupMembers_dbo.Groups_GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Invoice", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Registration", "Registration")
                        .WithMany("Invoices")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_dbo.Invoices_dbo.Registrations_GroupRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("DertInfo.Models.Database.JudgeSlot", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Competition", "Competition")
                        .WithMany("JudgeSlots")
                        .HasForeignKey("CompetitionId")
                        .HasConstraintName("FK_dbo.Judges_dbo.Competitions_CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Judge", "Judge")
                        .WithMany("JudgeSlots")
                        .HasForeignKey("JudgeId")
                        .HasConstraintName("FK_dbo.JudgeSlots_dbo.Judges_JudgeId");

                    b.HasOne("DertInfo.Models.Database.ScoreSet", "ScoreSet")
                        .WithMany("JudgeSlots")
                        .HasForeignKey("ScoreSetId")
                        .HasConstraintName("FK_dbo.JudgeSlots_dbo.ScoreSets_ScoreSetId");

                    b.HasOne("DertInfo.Models.Database.Venue", "Venue")
                        .WithMany("JudgeSlots")
                        .HasForeignKey("VenueId")
                        .HasConstraintName("FK_dbo.Judges_dbo.Venues_VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");

                    b.Navigation("Judge");

                    b.Navigation("ScoreSet");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("DertInfo.Models.Database.MarkingSheet", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Dance", "Dance")
                        .WithMany("MarkingSheets")
                        .HasForeignKey("DanceId")
                        .HasConstraintName("FK_dbo.MarkingSheets_dbo.Dances_DanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dance");
                });

            modelBuilder.Entity("DertInfo.Models.Database.MarkingSheetImage", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Dance", "Dance")
                        .WithMany("MarkingSheetImages")
                        .HasForeignKey("DanceId")
                        .HasConstraintName("FK_dbo.MarkingSheetImages_dbo.Dances_DanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Image", "Image")
                        .WithMany("MarkingSheetImages")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_dbo.MarkingSheetImages_dbo.Images_ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dance");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("DertInfo.Models.Database.MemberAttendance", b =>
                {
                    b.HasOne("DertInfo.Models.Database.AttendanceClassification", "AttendanceClassification")
                        .WithMany("MemberAttendances")
                        .HasForeignKey("AttendanceClassificationId")
                        .HasConstraintName("FK_dbo.MemberAttendances_dbo.AttendanceClassifications_AttendanceClassificationId");

                    b.HasOne("DertInfo.Models.Database.GroupMember", "GroupMember")
                        .WithMany("MemberAttendances")
                        .HasForeignKey("GroupMemberId")
                        .HasConstraintName("FK_dbo.MemberAttendances_dbo.GroupMembers_GroupMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Registration", "Registration")
                        .WithMany("MemberAttendances")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_dbo.MemberAttendances_dbo.Registrations_RegistrationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttendanceClassification");

                    b.Navigation("GroupMember");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Registration", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_dbo.Registrations_dbo.Events_EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Group", "Group")
                        .WithMany("Registrations")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_dbo.Registrations_dbo.Groups_GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ScoreCategory", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Competition", "CompetitionAppliesTo")
                        .WithMany("ScoreCategories")
                        .HasForeignKey("CompetitionAppliesToId")
                        .HasConstraintName("FK_dbo.ScoreCategories_dbo.Competitions_CompetitionAppliesToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompetitionAppliesTo");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ScoreSet", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Competition", "Competition")
                        .WithMany("ScoreSets")
                        .HasForeignKey("CompetitionId")
                        .HasConstraintName("FK_dbo.ScoreSets_dbo.Competitions_CompetitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ScoreSetScoreCategory", b =>
                {
                    b.HasOne("DertInfo.Models.Database.ScoreCategory", "ScoreCategory")
                        .WithMany("ScoreSetScoreCategories")
                        .HasForeignKey("ScoreCategoryId")
                        .HasConstraintName("FK_dbo.ScoreSetScoreCategories_dbo.ScoreCategories_ScoreCategory_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.ScoreSet", "ScoreSet")
                        .WithMany("ScoreSetScoreCategories")
                        .HasForeignKey("ScoreSetId")
                        .HasConstraintName("FK_dbo.ScoreSetScoreCategories_dbo.ScoreSets_ScoreSet_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoreCategory");

                    b.Navigation("ScoreSet");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Team", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Group", "Group")
                        .WithMany("Teams")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_dbo.Teams_dbo.Groups_GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("DertInfo.Models.Database.TeamAggregateScore", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Team", "DertTeam")
                        .WithMany("TeamAggregateScores")
                        .HasForeignKey("DertTeamId")
                        .HasConstraintName("FK_dbo.TeamAggregateScores_dbo.Teams_DertTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DertTeam");
                });

            modelBuilder.Entity("DertInfo.Models.Database.TeamAttendance", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Registration", "Registration")
                        .WithMany("TeamAttendances")
                        .HasForeignKey("RegistrationId")
                        .HasConstraintName("FK_dbo.TeamAttendances_dbo.Registrations_RegistrationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Team", "Team")
                        .WithMany("TeamAttendances")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.TeamAttendances_dbo.Teams_TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DertInfo.Models.Database.TeamImage", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Image", "Image")
                        .WithMany("TeamImages")
                        .HasForeignKey("ImageId")
                        .HasConstraintName("FK_dbo.TeamImages_dbo.Images_ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.Team", "Team")
                        .WithMany("TeamImages")
                        .HasForeignKey("TeamId")
                        .HasConstraintName("FK_dbo.TeamImages_dbo.Teams_TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Venue", b =>
                {
                    b.HasOne("DertInfo.Models.Database.Event", "Event")
                        .WithMany("Venues")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK_dbo.Venues_dbo.Events_EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("DertInfo.Models.Database.WebpagesUsersInRoles", b =>
                {
                    b.HasOne("DertInfo.Models.Database.WebpagesRoles", "Role")
                        .WithMany("WebpagesUsersInRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DertInfo.Models.Database.UserProfile", "User")
                        .WithMany("WebpagesUsersInRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DertInfo.Models.Database.AccessKey", b =>
                {
                    b.Navigation("AccessKeyUsers");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Activity", b =>
                {
                    b.Navigation("ParticipatingIndividuals");

                    b.Navigation("ParticipatingTeams");
                });

            modelBuilder.Entity("DertInfo.Models.Database.AttendanceClassification", b =>
                {
                    b.Navigation("MemberAttendances");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Competition", b =>
                {
                    b.Navigation("CompetitionEntries");

                    b.Navigation("CompetitionEntryAttributes");

                    b.Navigation("CompetitionJudges");

                    b.Navigation("CompetitionVenuesJoin");

                    b.Navigation("Dances");

                    b.Navigation("JudgeSlots");

                    b.Navigation("ScoreCategories");

                    b.Navigation("ScoreSets");
                });

            modelBuilder.Entity("DertInfo.Models.Database.CompetitionEntry", b =>
                {
                    b.Navigation("DertCompetitionEntryAttributeDertCompetitionEntries");
                });

            modelBuilder.Entity("DertInfo.Models.Database.CompetitionEntryAttribute", b =>
                {
                    b.Navigation("DertCompetitionEntryAttributeDertCompetitionEntries");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Dance", b =>
                {
                    b.Navigation("DanceScores");

                    b.Navigation("MarkingSheetImages");

                    b.Navigation("MarkingSheets");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DanceScore", b =>
                {
                    b.Navigation("DanceScoreParts");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DodResult", b =>
                {
                    b.Navigation("DodResultComplaints");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DodSubmission", b =>
                {
                    b.Navigation("DodResults");
                });

            modelBuilder.Entity("DertInfo.Models.Database.DodUser", b =>
                {
                    b.Navigation("DodResults");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Event", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("AttendanceClassifications");

                    b.Navigation("Competitions");

                    b.Navigation("EmailTemplates");

                    b.Navigation("EventImages");

                    b.Navigation("EventJudges");

                    b.Navigation("EventSettings");

                    b.Navigation("Registrations");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Group", b =>
                {
                    b.Navigation("GroupImages");

                    b.Navigation("GroupMembers");

                    b.Navigation("Registrations");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("DertInfo.Models.Database.GroupMember", b =>
                {
                    b.Navigation("MemberAttendances");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Image", b =>
                {
                    b.Navigation("EventImages");

                    b.Navigation("GroupImages");

                    b.Navigation("MarkingSheetImages");

                    b.Navigation("TeamImages");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Judge", b =>
                {
                    b.Navigation("CompetitionJudges");

                    b.Navigation("EventJudges");

                    b.Navigation("JudgeSlots");
                });

            modelBuilder.Entity("DertInfo.Models.Database.JudgeSlot", b =>
                {
                    b.Navigation("DanceScoreParts");
                });

            modelBuilder.Entity("DertInfo.Models.Database.MemberAttendance", b =>
                {
                    b.Navigation("MemberActivities");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Registration", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("MemberAttendances");

                    b.Navigation("TeamAttendances");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ScoreCategory", b =>
                {
                    b.Navigation("DanceScores");

                    b.Navigation("ScoreSetScoreCategories");
                });

            modelBuilder.Entity("DertInfo.Models.Database.ScoreSet", b =>
                {
                    b.Navigation("JudgeSlots");

                    b.Navigation("ScoreSetScoreCategories");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Team", b =>
                {
                    b.Navigation("TeamAggregateScores");

                    b.Navigation("TeamAttendances");

                    b.Navigation("TeamImages");
                });

            modelBuilder.Entity("DertInfo.Models.Database.TeamAttendance", b =>
                {
                    b.Navigation("CompetitionEntries");

                    b.Navigation("Dances");

                    b.Navigation("TeamActivities");
                });

            modelBuilder.Entity("DertInfo.Models.Database.UserProfile", b =>
                {
                    b.Navigation("WebpagesUsersInRoles");
                });

            modelBuilder.Entity("DertInfo.Models.Database.Venue", b =>
                {
                    b.Navigation("CompetitionVenuesJoin");

                    b.Navigation("Dances");

                    b.Navigation("JudgeSlots");
                });

            modelBuilder.Entity("DertInfo.Models.Database.WebpagesRoles", b =>
                {
                    b.Navigation("WebpagesUsersInRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
