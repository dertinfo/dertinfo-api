# Trigger the pipeline on pushes to the main branch
trigger:
  branches:
   include:
     - main
  paths:
   include:
    - src/*

# Do not trigger the pipeline on pull requests
pr:
  branches:
    exclude:
      - '*'
      
variables:
  - group: PrimaryAPI_Deployment_VariablesGroup
  - name: vmImageName
    value: 'ubuntu-latest'
  - name: location
    value: 'uksouth'
  - name: templateFile
    value: '**/apim/main.bicep'
  - name: csmParametersFile
    value: '**/apim/main.parameters.json'
  - name: buildConfiguration
    value: 'Release'
  - name: apiProjectLookupPath
    value: '**/dertinfo-api.csproj'
  - name: dotNetSdkVersion
    value: '8.x'

stages:
- stage: 'Run_Info'
  displayName: 'Run Information'
  jobs:
 - job: Run_Info
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        echo System.DefaultWorkingDirectory: '$(System.DefaultWorkingDirectory)'
        echo Build.SourceBranch: '$(Build.SourceBranch)'
        echo Build.Reason: '$(Build.Reason)'
        echo Build.ArtifactStagingDirectory: '$(Build.ArtifactStagingDirectory)'
        echo Build.BuildNumber: '$(Build.BuildNumber)'
        echo SubscriptionReference_Stg:'$(SubscriptionReference_Stg)'
        echo SubscriptionReference_Prod: '$(SubscriptionReference_Prod)'
        echo ResourceGroupName_Stg: '$(ResourceGroupName_Stg)'
        echo ResourceGroupName_Prod: '$(ResourceGroupName_Prod)'
        echo location: '$(location)'
        echo templateFile: '$(templateFile)'
        echo csmParametersFile: '$(csmParametersFile)'
        echo ApimInstanceName_Stg: '$(ApimInstanceName_Stg)'
        echo ApimInstanceName_Prod: '$(ApimInstanceName_Prod)'
        echo ApiName: '$(ApiName)'
        echo ApiDescription: '$(ApiDescription)'
        echo BackendServiceUrl_Stg: '$(BackendServiceUrl_Stg)'
        echo BackendServiceUrl_Prod: '$(BackendServiceUrl_Prod)'
        echo ApiPath: '$(ApiPath)'
        echo RateLimitCalls_Stg: '$(RateLimitCalls_Stg)'
        echo RateLimitCalls_Prod: '$(RateLimitCalls_Prod)'
        echo RateLimitRenewalSecs_Stg: '$(RateLimitRenewalSecs_Stg)'
        echo RateLimitRenewalSecs_Prod: '$(RateLimitRenewalSecs_Prod)'
      displayName: 'Output build variables'
    - script: |
        echo "Listing files in the artifact directory"
        ls -R $(System.DefaultWorkingDirectory)


- stage: PublishInfraAsArtefact
  displayName: 'Publish Infra Artefact'
    jobs:
      - job: Publish_Infra_Artefact
        pool:
          vmImage: $(vmImageName)
        steps:
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(System.DefaultWorkingDirectory)/infra'
              ArtifactName: 'infra'
              publishLocation: 'Container'

- stage: BuildAndPublishAPIAsArtefact
  displayName: 'Build and Publish API Artefact'
  jobs:
  - job: 'Build'
    displayName: 'Build the API'
    pool:
      vmImage: $(vmImageName)
      demands:
      - npm
    steps:
    - task: UseDotNet@2
      displayName: 'Set .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet dependencies'
      inputs:
        command: 'restore'
        projects: '**/dertinfo-api.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/dertinfo-api.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/dertinfo-api.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

- stage: 'UnitTest'
  displayName: 'Run Unit Tests'
  jobs:
  - job: 'UnitTest'
    displayName: 'Run the Unit Tests'
    pool:
      vmImage: $(vmImageName)
      demands:
      - npm
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Restore Unit Test project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.utests.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the Unit Test Projects - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.utests.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Install .NET tools from local manifest'
      inputs:
        command: custom
        custom: tool
        arguments: 'restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests - $(buildConfiguration)'
      inputs:
        command: 'test'
        arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/coverage/'
        publishTestResults: true
        projects: '**/*.utests.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Create code coverage report'
      inputs:
        command: custom
        custom: tool
        arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/coverage/*.cobertura.xml -targetdir:$(Build.SourcesDirectory)/coverage/html/ -reporttypes:HtmlInline_AzurePipelines'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage report'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/**/*.cobertura.xml'

- stage: 'DeployToTest'
  displayName: 'Deploy To Test'
  dependsOn: OutputInformation
  jobs:
  - deployment: Deploy_Website_To_Test
    pool:
      vmImage: $(vmImageName)
    environment: Test
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: '(JUL2024) Visual Studio Professional Subscription (9ee4f83c-a9a6-41a0-822d-13e18dc6c648)'
              appType: 'webApp'
              appName: '$(ApiWebAppName_Stg)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
              deploymentMethod: 'auto'
  - deployment: Deploy_ApimDefinition_To_Test
      pool:
        vmImage: $(vmImageName)
      environment: Test
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: infra
            - script: |
                echo "Listing files in the pipeline workspace"
                ls -R $(Pipeline.Workspace)
            - task: AzureResourceManagerTemplateDeployment@3
              inputs:
                azureResourceManagerConnection: '$(SubscriptionReference_Stg)'
                deploymentScope: 'Resource Group'
                action: 'Create Or Update Resource Group'
                resourceGroupName: '$(ResourceGroupName_Stg)'
                location: '$(location)'
                templateLocation: 'Linked artifact'
                csmFile: '$(Pipeline.Workspace)/infra/**/$(templateFile)'
                csmParametersFile: '$(Pipeline.Workspace)/infra/**/$(csmParametersFile)'
                deploymentMode: 'Incremental'
                deploymentName: 'Deploy-Integration-APIM' 
                overrideParameters: -apimInstanceName "$(ApimInstanceName_Stg)" -apiName "$(ApiName)" -apiDescription "$(ApiDescription)" -backendServiceUrl "$(BackendServiceUrl_Stg)" -apiPath "$(apiPath)" -rateLimitCalls "$(RateLimitCalls_Stg)" -rateLimitRenewalSecs "$(RateLimitRenewalSecs_Stg)"

- stage: 'DeployToLive
  displayName: 'Deploy To Live'
  dependsOn: 
    - Deploy_To_Test
  jobs:
  - deployment: Deploy_Website_To_Live
    pool:
      vmImage: $(vmImageName)
    environment: Live
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: '(JUL2024) DertInfo Subscription (e9f1da4f-d34f-4e93-b7c9-75d375a60253)'
              appType: 'webApp'
              appName: '$(ApiWebAppName_Prod)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
              deploymentMethod: 'auto'
   - deployment: Deploy_ApimDefinition_To_Live
     pool:
       vmImage: $(vmImageName)
     environment: Live
     strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: infra
          - script: |
              echo "Listing files in the artifact directory"
              ls -R $(Pipeline.Workspace)
          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              azureResourceManagerConnection: '$(SubscriptionReference_Prod)'
              deploymentScope: 'Resource Group'
              action: 'Create Or Update Resource Group'
              resourceGroupName: '$(ResourceGroupName_Prod)'
              location: '$(location)'
              templateLocation: 'Linked artifact'
              csmFile: '$(Pipeline.Workspace)/infra/**/$(templateFile)'
              csmParametersFile: '$(Pipeline.Workspace)/infra/**/$(csmParametersFile)'
              deploymentMode: 'Incremental'
              deploymentName: 'Deploy-Integration-APIM' 
              overrideParameters: -apimInstanceName "$(ApimInstanceName_Prod)" -apiName "$(ApiName)" -apiDescription "$(ApiDescription)" -backendServiceUrl "$(BackendServiceUrl_Prod)" -apiPath "$(apiPath)" -rateLimitCalls "$(RateLimitCalls_Prod)" -rateLimitRenewalSecs "$(RateLimitRenewalSecs_Prod)"

- stage: BuildAndPushDockerImage
  displayName: 'Build and Publish Docker Image'
  dependsOn: DeployToLive
  jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'Docker Hub Service Connection (dertinfo)'
        repository: 'dertinfo/dertinfo-api'
        command: 'buildAndPush'
        Dockerfile: './src/dertinfo-api/Dockerfile'
        buildContext: './src'
        tags: |
            latest
            $(Build.BuildId)